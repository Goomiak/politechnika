import tkinter as tk
import cv2
from PIL import Image, ImageTk
import threading
import time

# Flagi kontrolujące oglądanie slajdów
direct_slides_viewed = False
coherent_slides_viewed = False

# Funkcja aktualizująca status przycisku "Final"
def update_final_button(menu_window, final_button):
    if direct_slides_viewed and coherent_slides_viewed:
        final_button.config(state=tk.NORMAL)

# Funkcja startowa - przejście do okna wyboru
def start_app():
    start_window.destroy()  # Zamknięcie okna startowego
    create_menu_window()

# Funkcja zarządzająca slajdami w oknie Direct Detection
def show_direct_detection(menu_window, final_button):
    slides = [
        ("vid1.mp4", "Direct Detection - Slide 1", "Direct detection: Slide 1 description..."),
        ("vid2.mp4", "Direct Detection - Slide 2", "Direct detection: Slide 2 description..."),
        ("vid3.mp4", "Direct Detection - Slide 3", "Direct detection: Slide 3 description...")
    ]
    show_window_sequence(slides, "Direct Detection", lambda: mark_direct_slides_as_viewed(menu_window, final_button))

# Funkcja zarządzająca slajdami w oknie Coherent Detection
def show_coherent_detection(menu_window, final_button):
    slides = [
        ("vid3.mp4", "Coherent Detection - Slide 1", "Coherent detection: Slide 1 description..."),
        ("vid2.mp4", "Coherent Detection - Slide 2", "Coherent detection: Slide 2 description..."),
        ("vid1.mp4", "Coherent Detection - Slide 3", "Coherent detection: Slide 3 description...")
    ]
    show_window_sequence(slides, "Coherent Detection", lambda: mark_coherent_slides_as_viewed(menu_window, final_button))

# Funkcja do oznaczania slajdów Direct jako obejrzane
def mark_direct_slides_as_viewed(menu_window, final_button):
    global direct_slides_viewed
    direct_slides_viewed = True
    update_final_button(menu_window, final_button)

# Funkcja do oznaczania slajdów Coherent jako obejrzane
def mark_coherent_slides_as_viewed(menu_window, final_button):
    global coherent_slides_viewed
    coherent_slides_viewed = True
    update_final_button(menu_window, final_button)

# Funkcja odtwarzania wideo w osobnym wątku
def play_video(video_path, video_label, stop_event):
    cap = cv2.VideoCapture(video_path)

    def update_frame():
        while not stop_event.is_set():
            ret, frame = cap.read()
            if ret:
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                img = Image.fromarray(frame)
                imgtk = ImageTk.PhotoImage(image=img)

                # Aktualizacja obrazu w głównym wątku Tkintera
                video_label.after(0, video_label.config, {'image': imgtk})
                video_label.imgtk = imgtk  # Trzeba trzymać referencję do obrazu, aby nie został usunięty przez garbage collector
            else:
                cap.set(cv2.CAP_PROP_POS_FRAMES, 0)  # Odtwarzaj od początku, jeśli wideo się zakończy

            time.sleep(1 / 30)  # Spowalniaj pętlę, aby dopasować odświeżanie do około 30 fps

    threading.Thread(target=update_frame, daemon=True).start()

# Funkcja tworząca sekwencję okien slajdów
def show_window_sequence(slides, title, on_finish):
    def create_slide_window(index):
        slide_window = tk.Toplevel()
        slide_window.attributes('-fullscreen', True)  # Pełny ekran
        slide_window.title(title)

        video_path, slide_title, slide_text = slides[index]

        # Tekst slajdu
        text_label = tk.Label(slide_window, text=slide_text, font=("Helvetica", 16))
        text_label.pack(pady=10)

        # Wideo
        video_label = tk.Label(slide_window)
        video_label.pack()

        stop_event = threading.Event()

        # Odtwarzaj wideo
        play_video(video_path, video_label, stop_event)

        # Pasek nawigacyjny
        nav_frame = tk.Frame(slide_window)
        nav_frame.pack(side=tk.BOTTOM, fill=tk.X)

        # Funkcja zamykająca okno i przechodząca do następnego slajdu
        def next_slide():
            stop_event.set()
            slide_window.destroy()
            if index < len(slides) - 1:
                create_slide_window(index + 1)
            else:
                on_finish()

        # Funkcja zamykająca okno i wracająca do poprzedniego slajdu
        def previous_slide():
            stop_event.set()
            slide_window.destroy()
            if index > 0:
                create_slide_window(index - 1)

        # Przycisk "Back"
        back_button = tk.Button(nav_frame, text="Back", command=previous_slide)
        back_button.pack(side=tk.LEFT, padx=20, pady=20)
        back_button.config(state=tk.NORMAL if index > 0 else tk.DISABLED)

        # Przycisk "Next"
        next_button = tk.Button(nav_frame, text="Next", command=next_slide)
        next_button.pack(side=tk.RIGHT, padx=20, pady=20)
        next_button.config(text="Finish" if index == len(slides) - 1 else "Next")

        # Przycisk "Close"
        def close_window():
            stop_event.set()
            slide_window.destroy()

        close_button = tk.Button(nav_frame, text="Close", command=close_window)
        close_button.pack(side=tk.RIGHT, padx=20, pady=20)

    # Uruchomienie pierwszego okna
    create_slide_window(0)

# Funkcja wyświetlająca okno z testem
def show_final_test():
    final_window = tk.Toplevel()
    final_window.attributes('-fullscreen', True)  # Pełny ekran
    final_window.title("Test")

    label = tk.Label(final_window, text="Test - 10 questions about Direct and Coherent Detection", font=("Helvetica", 16))
    label.pack()

    # Przycisk "Close"
    close_button = tk.Button(final_window, text="Close", command=final_window.destroy)
    close_button.pack(pady=20)

# Tworzenie okna z menu wyboru
def create_menu_window():
    menu_window = tk.Tk()
    menu_window.attributes('-fullscreen', True)  # Pełny ekran
    menu_window.title("Choose Detection Method")

    # Wczytywanie obrazów
    icon1 = Image.open("icon1.jpg")
    icon1 = icon1.resize((283, 283), Image.Resampling.LANCZOS)  # Dostosowanie rozmiaru obrazu
    icon1_tk = ImageTk.PhotoImage(icon1)

    icon2 = Image.open("icon2.jpg")
    icon2 = icon2.resize((283, 283), Image.Resampling.LANCZOS)  # Dostosowanie rozmiaru obrazu
    icon2_tk = ImageTk.PhotoImage(icon2)

    # Funkcje do obsługi kliknięć na ikony
    def on_direct_detection():
        show_direct_detection(menu_window, btn_final)

    def on_coherent_detection():
        show_coherent_detection(menu_window, btn_final)

    title_label = tk.Label(menu_window, text="Kliknij ikonę i wybierz zagadnienie, które chcesz trenować: Detekcja Bezpośrednia / Detekcja Koherentna.", font=("Arial", 16), wraplength=1000, justify="center")
    title_label.pack(pady=20)

    info_label = tk.Label(menu_window, text="Każdy z modułów zawiera wstęp teoretyczny, animacje, model matematyczny oraz symulację interaktywną. ", font=("Arial", 16), wraplength=1000, justify="center")
    info_label.pack(pady=20)


    # Ramka dla przycisków
    button_frame = tk.Frame(menu_window)
    button_frame.pack(pady=20)

    # Ikona "Detekcja bezpośrednia"
    btn_direct = tk.Label(button_frame, image=icon1_tk, cursor="hand2")
    btn_direct.image = icon1_tk  # Zachowanie referencji do obrazu
    btn_direct.bind("<Button-1>", lambda e: on_direct_detection())
    btn_direct.pack(side="left", padx=20)

    # Ikona "Detekcja koherentna"
    btn_coherent = tk.Label(button_frame, image=icon2_tk, cursor="hand2")
    btn_coherent.image = icon2_tk  # Zachowanie referencji do obrazu
    btn_coherent.bind("<Button-1>", lambda e: on_coherent_detection())
    btn_coherent.pack(side="left", padx=20)

    test_label = tk.Label(menu_window, text="Po ukończeniu wszystkich modułów, aktywuje się poniższy przycisk.\n Odpowiedz na 10 pytań i sprawdź swoją wiedzę.", font=("Arial", 16), wraplength=1000, justify="center")
    test_label.pack(pady=20)

    # Przycisk "Final" (początkowo nieaktywny)
    btn_final = tk.Button(menu_window, text="Test wiedzy", state=tk.DISABLED, font=("Arial", 16), command=show_final_test)
    btn_final.pack(pady=10)

    # Przycisk "Close" dla okna menu
    close_button = tk.Button(menu_window, text="Zamknij", font=("Arial", 16), command=menu_window.destroy)
    close_button.pack(pady=10)

    menu_window.mainloop()

# Tworzenie okna startowego
start_window = tk.Tk()
start_window.attributes('-fullscreen', True)  # Pełny ekran
start_window.title("Start")

img = Image.open('wtie.png').convert("RGBA")
img = img.resize((720, 270), Image.Resampling.LANCZOS)  # Zmiana rozmiaru obrazka, jeśli potrzebne
img_tk = ImageTk.PhotoImage(img)

image_wtie = tk.Label(start_window, image=img_tk)
image_wtie.image = img_tk
image_wtie.pack(pady=30)

title_label = tk.Label(start_window, text="Aplikacja dydaktyczna: zasady detekcji bezpośredniej i koherentnej", font=("Arial", 16), wraplength=1000, justify="center")
title_label.pack(pady=20)

info_label = tk.Label(start_window, text="Aplikacja została wykonana w ramach projektu z przedmiotu Cyfrowe Modulacje i Kodowanie na studiach magisterskich  Kierunek: Elektronika i Telekomunikacja", font=("Arial", 14),  wraplength=1000, justify="center")
info_label.pack(pady=10)

authors_label = tk.Label(start_window, text="Autorzy:\nKamil Jankowski\nFilip Grządziel", font=("Arial", 14))
authors_label.pack(pady=10)

authors_label = tk.Label(start_window, text="Aby rozpocząć wciśnij Start, aby przerwać naciśnij Zamknij", font=("Arial", 14))
authors_label.pack(pady=10)

button_frame = tk.Frame(start_window)
button_frame.pack(pady=20)

# Przycisk "Start"
start_button = tk.Button(button_frame, text="Start", font=("Arial", 16), command=start_app)
start_button.pack(side="left", padx=10)

# Przycisk "Close"
close_button = tk.Button(button_frame, text="Zamknij", font=("Arial", 16), command=start_window.destroy)
close_button.pack(side="left", padx=10)




start_window.mainloop()
